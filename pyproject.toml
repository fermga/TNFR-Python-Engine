[project]
name = "tnfr"
dynamic = ["version"]
description = "Modular structural-based dynamics on networks."
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [{ name = "fmg" }]
keywords = [
  "TNFR", "complex systems", "fractals", "resonance", 
  "networks", "structural dynamics", 
  "structural analysis"
]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Topic :: Scientific/Engineering :: Mathematics"
]
dependencies = [
  "networkx>=2.6",
  "cachetools>=5",
  "typing-extensions>=4.4; python_version < \"3.10\"",
]

[project.optional-dependencies]
numpy = ["numpy>=1.24"]
yaml = ["pyyaml>=6.0"]
orjson = ["orjson>=3"]
test = [
  "pytest>=7",
  "pytest-benchmark>=4",
  "pydocstyle>=6",
  "coverage>=7",
  "flake8>=5",
  "flake8-pyproject>=1.2",
  "vulture>=2",
]
typecheck = [
  "mypy>=1.8",
  "networkx-stubs>=0.0.1",
  "types-cachetools>=6.0.0.0",
  "numpy>=1.24",
]

[project.scripts]
tnfr = "tnfr.cli:main"

[project.urls]
Homepage = "https://pypi.org/project/tnfr/"
Repository = "https://github.com/fermga/TNFR-Python-Engine"
GPT = "https://chatgpt.com/g/g-67abc78885a88191b2d67f94fd60dc97-tnfr-resonant-fractal-nature-theory"

[tool.setuptools.dynamic]
version = { attr = "tnfr._version.__version__" }

[tool.setuptools.package-data]
tnfr = ["py.typed"]

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]

[tool.isort]
profile = "black"
line_length = 88
skip = ["benchmarks"]

[tool.flake8]
max-line-length = 88
ignore = ["E501", "W503"]
exclude = ["benchmarks/"]

[tool.tnfr.language_check]
disallowed_keywords = [
  "est\u0061ble",
  "transici\u006f\u006e",
  "transici\u00f3n",
  "diso\u006enante",
  "operad\u006fres",
  "operad\u006fr",
  "e\u006aemplo",
  "\u006fpcionales",
  "\u0064ependencia",
  "\u0063ompatibilidad",
  "\u0076alores",
  "\u0064ebe",
  "\u0072ecomputar",
  "\u006d\u006ftor",
  "\u0070or_defecto",
]
accented_characters = [
  "\u00e1",
  "\u00e9",
  "\u00ed",
  "\u00f3",
  "\u00fa",
  "\u00fc",
  "\u00f1",
  "\u00c1",
  "\u00c9",
  "\u00cd",
  "\u00d3",
  "\u00da",
  "\u00dc",
  "\u00d1",
  "\u00bf",
  "\u00a1",
]
exclude = [
  "TNFR.pdf",
  "benchmarks/**/*.pdf",
]

[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = "-m 'not slow' --benchmark-skip"
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "benchmarks: run with 'pytest benchmarks --benchmark-only' to execute the benchmark suite",
]

[tool.mypy]
python_version = "3.10"
warn_unused_configs = true
warn_return_any = false
no_implicit_optional = false
strict_equality = false
disallow_any_unimported = false
show_error_codes = true
follow_imports = "skip"
allow_redefinition = true
allow_untyped_defs = false
allow_untyped_calls = false
allow_untyped_globals = false

[[tool.mypy.overrides]]
module = ["networkx", "networkx.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["yaml", "yaml.*"]
ignore_missing_imports = true


[build-system]
requires = ["setuptools>=78.1.1", "wheel"]
build-backend = "setuptools.build_meta"
